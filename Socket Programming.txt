				...............Server Side.........
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Threading;
using System.Diagnostics;
using System.Net.Sockets;
using System.Net;
namespace Server
{
    class Program
    {
        static byte[] Buffer{get; set; }
        static Socket sck;
        static void Main(string[] args)
        {
            //creating a socket
            sck = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            sck.Bind(new IPEndPoint(0,1234));
            sck.Listen(100);   
            Socket accepted = sck.Accept();
            Buffer = new byte[accepted.SendBufferSize];
            int bytesRead = accepted.Receive(Buffer);
            byte[] formatted = new byte[bytesRead];
            for (int i = 0; i < bytesRead; i++)
            {
                formatted[i] = Buffer[i];
            }
            string strData = Encoding.ASCII.GetString(formatted);
            Console.WriteLine(strData + "\r\n");
            Console.Read();
            sck.Close();
            accepted.Close();

        }
    }

}
								>...........Server Side...........>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Threading;
using System.Diagnostics;
using System.Net.Sockets;
using System.Net;

namespace clint
{
    internal class Program
    {
        static Socket sck;
        static void Main(string[] args)
        {
            sck = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            IPEndPoint localEndPoint = new IPEndPoint(IPAddress.Parse("127.0.0.1"), 1234);
            try
            {
                sck.Connect(localEndPoint); 
            }
            catch
            {
                Console.WriteLine("Unable to connect! \r\n");
                Main(args); 
            }
            Console.WriteLine("Enter Text: ");
            string text = Console.ReadLine();
            byte[] data = Encoding.ASCII.GetBytes(text);
            sck.Send(data);
            Console.WriteLine("Data Sent! \r\n");
            Console.WriteLine("Press any Key To continue...");
            Console.Read();
            sck.Close();
        } 
    }
}
						..................Server autometic sent message to clint............
						
						.......................Server.....................
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Threading;
using System.Diagnostics;
using System.Net.Sockets;
using System.Net;
namespace Server
{
    class Program
    {
        static void Main(string[] args)
        {


            Socket sck = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            sck.Bind(new IPEndPoint(0, 1994));
            sck.Listen(0);

            Socket acc =sck.Accept();

            byte[] buffer = Encoding.Default.GetBytes("Hello client!");
            acc.Send(buffer, 0, buffer.Length, 0);

            buffer = new byte[255];

            int rec = acc.Receive(buffer, 0, buffer.Length, 0);
            Array.Resize(ref buffer, rec);
            Console.WriteLine("Received: (0)", Encoding.Default.GetString(buffer));
            sck.Close();
            acc.Close();
            Console.Read();

        }
    }
}
							...................Clint...............
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Threading;
using System.Diagnostics;
using System.Net.Sockets;
using System.Net;

namespace clint
{
    class Program
    {
        static void Main(string[] args)
        {
            Socket sck = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            IPEndPoint endPoint = new IPEndPoint(IPAddress.Parse("127.0.0.1"), 1994);

            sck.Connect(endPoint);
            Console.Write("Enter Message: ");

            string msg = Console.ReadLine();
            byte[] msgBuffer = Encoding.Default.GetBytes(msg);

            sck.Send(msgBuffer, 0, msgBuffer.Length, 0);
            byte[] buffer = new byte[255];

            int rec = sck.Receive(buffer, 0, buffer.Length, 0);
            Array.Resize(ref buffer, rec);

            Console.WriteLine("Received: (0}", Encoding.Default.GetString(buffer));
            sck.Close();
            Console.Read();
        }
    }
}

										..........clint strte....
using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Net.Sockets;
using System.Text;
using System.Threading.Tasks;

namespace SocketClientStarter
{
    class Program
    {
        static void Main(string[] args)
        {
            Socket client = null;
            client = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);

            IPAddress ipaddr = null;

            try
            {
                Console.WriteLine("*** Welcome to Socket Client Starter Example by Muhammad Zeeshan Latif ***");
                Console.WriteLine("Please Type a Valid Server IP Address and Press Enter: ");

                string strIPAddress = Console.ReadLine();

                Console.WriteLine("Please Supply a Valid Port Number 0 - 65535 and Press Enter: ");
                string strPortInput = Console.ReadLine();
                int nPortInput = 0;

                if (strIPAddress == " ") strIPAddress = "127.0.0.1";
                if (strPortInput == " ") strPortInput = "23000";

                if (!IPAddress.TryParse(strIPAddress, out ipaddr))
                {
                    Console.WriteLine("Invalid server IP supplied.");
                    return;
                }
                if (!int.TryParse(strPortInput.Trim(), out nPortInput))
                {
                    Console.WriteLine("Invalid port number supplied, return.");
                    return;
                }

                if (nPortInput <= 0 || nPortInput > 65535)
                {
                    Console.WriteLine("Port number must be between 0 and 65535.");
                    return;
                }

                System.Console.WriteLine(string.Format("IPAddress: {0} - Port: {1}", ipaddr.ToString(), nPortInput));

                client.Connect(ipaddr, nPortInput);
                
                Console.WriteLine("Connected to the server, type text and press enter to send it to the srever, type <EXIT> to close.");

                string inputCommand = string.Empty;

                while(true)
                {
                    inputCommand = Console.ReadLine();

                    if(inputCommand.Equals("<EXIT>"))
                    {
                        break;
                    }

                    byte[] buffSend = Encoding.ASCII.GetBytes(inputCommand);

                    client.Send(buffSend);

                    byte[] buffReceived = new byte[128];
                    int nRecv = client.Receive(buffReceived);

                    Console.WriteLine("Data received: {0}", Encoding.ASCII.GetString(buffReceived, 0, nRecv));
                }
            }
            catch (Exception excp)
            {
                Console.WriteLine(excp.ToString());
            }
            finally
            {
                if (client != null)
                {
                    if (client.Connected)
                    {
                        client.Shutdown(SocketShutdown.Both);
                    }
                    client.Close();
                    client.Dispose();
                }
            }

            Console.WriteLine("Press a key to exit...");
            Console.ReadKey();
           
        }
    }
}
				....server/....
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Net;
using System.Net.Sockets;


namespace SocketsServerStarter
{
    class Program
    {
        static void Main(string[] args)
        {
            Socket listenerSocket = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);

            IPAddress ipaddr = IPAddress.Any;

            IPEndPoint ipep = new IPEndPoint(ipaddr, 23000);

            try
            {
                listenerSocket.Bind(ipep);

                listenerSocket.Listen(5);

                Console.WriteLine("About to accept incoming connection.");

                Socket client = listenerSocket.Accept();

                Console.WriteLine("Client connected. " + client.ToString() + " - IP End Point: " + client.RemoteEndPoint.ToString());

                byte[] buff = new byte[128];

                int numberOfReceivedBytes = 0;

                while (true)
                {

                    numberOfReceivedBytes = client.Receive(buff);

                    Console.WriteLine("Number of received bytes: " + numberOfReceivedBytes);

                    Console.WriteLine("Data sent by client is: " + buff);

                    string receivedText = Encoding.ASCII.GetString(buff, 0, numberOfReceivedBytes);

                    Console.WriteLine("Data sent by client is: " + receivedText);

                    client.Send(buff);

                    if (receivedText == "x")
                    {
                        break;
                    }

                    Array.Clear(buff, 0, buff.Length);
                    numberOfReceivedBytes = 0;
                }
            }
            catch(Exception excp)
            {
                Console.WriteLine(excp.ToString());
            }
            
        }
    }
}
